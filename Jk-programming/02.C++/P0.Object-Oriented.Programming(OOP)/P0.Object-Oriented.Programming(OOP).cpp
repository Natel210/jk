// P0.Object-Oriented.Programming(OOP).cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

// 지금까지는 
// 데이터 구조(struct)와
// 처리구조(Func...etc)가
// 분리되어 있었다.

//클래스는 데이터와 함수가 하나에 있다!
//쉽게말해서 향실에 가깝게 언어를 표현하기 위해서 발생한 문법
//클래스에는 다


//객체지향의 5대 원칙
//SOLID?

//1.SRP
// 단일 책임의 원칙
// Single Responsibility Principle
// 하나의 클래스에서 계산기 전체를 한다면?
// 당연히 애러날확률은 기하급수적으로 증가한다.
// 그래서 각 클라스마다 행동을 1개로 하자!
// 그래서 어떤 클래스를 변경해야 하는 이유는 1뿐이다.

//클래스 하나가 개별적 작용 -> Class1, 2, 3이 있는데
//Class1에 대한 함수가 충돌했어
//그럼 그거떔에 애러가떠
//그럼 그걸 수정만하면 끗
//-> 우리가 해더함수를 만들어서 함수를 분리하고 
// 그애따른 문제가 생길때마다 해당 함수로 F12로 이동하여 클리어하는 작업
//이걸또 해더만드는걸 귀찮아해서 클래스라는걸 아이에만듬
// C에서는 하나가 터짐으로인해서 파생되는 결과를 모든것을 보여주었다.
// 그래서 내가 RPG만들떄 맨탈부셔진 이유중 하나
// 보면 해더파일에서 문제떳다고 2000++만큼 뜨는대 그걸볼이유가 있을까?
// 그것에대해서 클래스를통해서 막스를 확인하고 개별적인 문제만 할달
// 만약 공통된 문제라면 마더에게 넘긴다.


//2.OCP
// 개방 폐쇄의 원칙
// Open Close Principle
// 이건딱 내가 강화숙제에서 어떻개짤가에 대한 고민에 대한 해결점
// 내가 원하던건 (표기는)(강화를뺀 대미지)(강화+) -> 배틀에서만 구현
// 내가 정한클래스에 내가 변수를 변하게 하고싶은것만을 변하게 "개방"
// 절대로 변해서 안되는 것에 대해서 픽스 "폐쇄"

//3.LSP
// 리스코브 치환의 원칙
// The Liskov Substitution Principle
// 이건뭐 내가 정한 그룹끼리면 연결된다는 느낌
//  1st class
// 2nd class 1       \!=\       2nd class 2

//4.ISP
// 인터페이스 분리의 원칙
// Interface Segregation Principle
// 이건 쉽개말해서 내가 로직을짤대
// class (1st) -> 사람 -> 이름, 키 , 체중, ....(이지만 3개만 구성한다)
// class (2nd) -> 이름 -> 영어권 이름(FN, MN, LN) , 한국식이름(성, 이름), 기타(...)
// class (3th) -> 영어권 이름 -> 프랑스어, 영어, 독일어 .....
//그리고 내가 다른 클래스를 이용해서 언어팩을 가져다가 쓰고 싶어 그럼 위임이라는 사용한다.
// 근대 여기서 각클래스가 이름이라는것을 쓰니깐 이름은 1st에 하나해서 공유해서 쓰자



//5.DIP
// 의존성역전의 원칙
// Dependency Inversion Principle
// 이건 쉽내 컴퓨터는?
// 위에서 아래로
// 오른쪽에서 왼쪽으로
// 그걸 클래스 내에서만 구현하겟다.
// 그러면 1st클래스는
// 2ed의 난리 부르스를 결과값에 대해서 반영을 안해준다면.
// 1st는 픽스다




//객체지향의 4대 특징

//1.추상화
// 객체들중에서 공동으로쓸것들을 뽑아내는것
// 공통의 속성이나 기능을 묶어서 이름 붙이는것

//2.캡슐화
// SET(구조-함수, 데이터-int명재)
//이것을 데이터는 은닉해버리고 함수만 보여주기!

//3.상속성
//가족에서는 상하로만 상속과 종속을 가질수 있다.

//4.다형성
//1st Class그리그려라
//2nd Class1 
//		Func -> 사각형 
//2nd Class2 
//      Func -> 오각형

//2nd Class1 사각형을 그린다
//			!=
//2nd Class2 오각형을 그린다



////////////////////////////TP그대로/////////////////////////
// 개념적으로 설명하자면
// c는 절차지향 프로그래밍이라고 합니다.
// 프로그래밍적 사상이바로 
// 객체지향이라는 것이 나왔습니다.


// c는 절차지향을 하기 쉬운 언어.
// c하고 싶다면 할수 있다.
// c++ 객체지향 할수 있는 언어이다.
// c++ 객체라는 것을 만들수 있는 언어이다.

// 객체라는 것에 대해서 알아야 한다.

// c는 이 개념을 소화할수 있으나
// c에서 함수 포인터라는 것이 존재한다.
// 구조체가 내부에 함수포인터(함수의 주소)를 포함함으로해서
// 함수를 가질수가 있다.
// 포함을 이용해서 상속도 흉내낼수 있다.
// 힘들다.
////////////////////////////TP그대로/////////////////////////




int main()
{
	return 0;
}

